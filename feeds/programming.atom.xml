<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Towards Freedom - Programming</title><link href="http://blog.purambokku.me/" rel="alternate"></link><link href="http://blog.purambokku.me/feeds/programming.atom.xml" rel="self"></link><id>http://blog.purambokku.me/</id><updated>2019-02-19T00:00:00+05:30</updated><entry><title>Clojure Notes 1</title><link href="http://blog.purambokku.me/clojure-notes-1.html" rel="alternate"></link><published>2019-02-19T00:00:00+05:30</published><updated>2019-02-19T00:00:00+05:30</updated><author><name>Prasanna Venkadesh</name></author><id>tag:blog.purambokku.me,2019-02-19:/clojure-notes-1.html</id><summary type="html">&lt;p&gt;Started learning another general purpose programming language called &lt;strong&gt;&lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt;&lt;/strong&gt; which speaks &lt;strong&gt;lisp&lt;/strong&gt; dialect and runs on top of &lt;strong&gt;JVM&lt;/strong&gt;. Thanks to Kamalavelan for creating an interest for me to learn clojure and particularly the book titled, &lt;strong&gt;&lt;a href="https://nostarch.com/clojure"&gt;Clojure For The Brave and True&lt;/a&gt;&lt;/strong&gt; by David Higginbotham is very enjoyable.
https://nostarch â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Started learning another general purpose programming language called &lt;strong&gt;&lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt;&lt;/strong&gt; which speaks &lt;strong&gt;lisp&lt;/strong&gt; dialect and runs on top of &lt;strong&gt;JVM&lt;/strong&gt;. Thanks to Kamalavelan for creating an interest for me to learn clojure and particularly the book titled, &lt;strong&gt;&lt;a href="https://nostarch.com/clojure"&gt;Clojure For The Brave and True&lt;/a&gt;&lt;/strong&gt; by David Higginbotham is very enjoyable.
https://nostarch.com/clojure
As a matter of taking notes of what I learn from the book, I share the notes here chapter wise.&lt;/p&gt;
&lt;h3&gt;Chapter 1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Installing Clojure.&lt;/li&gt;
&lt;li&gt;Installing &lt;a href="https://leiningen.org/"&gt;leiningen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lein new app &amp;lt;folder-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; based syntax, namespaces, -main function, &lt;code&gt;println&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lein run&lt;/code&gt; =&amp;gt; to build and see the output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lein uberjar&lt;/code&gt; =&amp;gt; to build standalone jars&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lein repl&lt;/code&gt; =&amp;gt; to start a repl&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Chapter 2 - Emacs&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;I have largely ignored emacs tutorial.&lt;/li&gt;
&lt;li&gt;But installed gnu emacs.&lt;/li&gt;
&lt;li&gt;Downloaded clojure configuration for emacs&lt;/li&gt;
&lt;li&gt;Downloaded and installed &lt;a href="https://sekao.net/nightcode/"&gt;Nightcode IDE&lt;/a&gt; for clojure and I prefer it for now.&lt;/li&gt;
&lt;li&gt;Also using lein repl to practice.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Chapter 3 - Language Fundamentals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;started using NightCode with REPL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FORMS&lt;/code&gt; are expressions that clojure evaluates to produce a value.&lt;/li&gt;
&lt;li&gt;ex: &lt;code&gt;1 "a string" ["a" "string" "vector]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;basic syntax: &lt;code&gt;(operator operand1 operand2 ... operandn)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the above syntax is unifrom throughout LISP dialect.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(str "string1" "string2)&lt;/code&gt; =&amp;gt; string1string2 =&amp;gt; concatenates strings.&lt;/li&gt;
&lt;li&gt;control flow =&amp;gt; if do when&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(if boolean-form then-form optional-else-form)&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(if true
&amp;quot;Sucess&amp;quot;
&amp;quot;Failure&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;note that if..else can execute only one form. to overcome this we can use do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(if true
    (do (println &amp;quot;Success&amp;quot;)
        &amp;quot;succesS&amp;quot;)
    (do (println &amp;quot;Failure&amp;quot;)
        &amp;quot;failure&amp;quot;))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;when&lt;/code&gt; operator is like both if and do together but without else part and returns nil when the condition is false.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;or&lt;/code&gt; and &lt;code&gt;and&lt;/code&gt; boolean operators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nil&lt;/code&gt; represents no value in clojure.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;binding value to variables are done using &lt;strong&gt;def&lt;/strong&gt; keyword&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(def name &amp;quot;prasanna&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ratio can be directly represented in clojure. &lt;code&gt;1/5&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maps&lt;/strong&gt; are key, value store. &lt;strong&gt;Hashmap&lt;/strong&gt; and &lt;strong&gt;Sorted maps&lt;/strong&gt; are present in clojure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(def sampleMap {:first_name &amp;quot;Prasanna&amp;quot; :last_name &amp;quot;Venkadesh})
(get sampleMap :first_name)
(sampleMap :first_name)
(:first_name sampleMap)

(def sampleHashMap (hashmap :a 1 :b 2))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maps can also be nested and &lt;code&gt;get-in&lt;/code&gt; function is used to retreive nested map values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(get-in {:a 0 :b {:c &amp;quot;1}} [:b :c])
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vectors&lt;/strong&gt; are like 0 indexed arrays and can be heterogenous.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[1 2 3 4]&lt;/span&gt;
&lt;span class="na"&gt;(def vecData [1 2 3 4])&lt;/span&gt;
&lt;span class="na"&gt;(get vecData 2)&lt;/span&gt;
&lt;span class="na"&gt;(conj vecData 10)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;conj&lt;/code&gt; function is used to append value at to vector and &lt;code&gt;vector&lt;/code&gt; function is used to create a new vector with supplied values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(vector &amp;quot;test&amp;quot; 1 &amp;quot;testing&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt; in clojure is similar to vector, but &lt;code&gt;get&lt;/code&gt; function will not work with list. &lt;code&gt;nth&lt;/code&gt; function has to be used instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;(1 2 3 4)
(list 1 2 3 4)
(def listData &amp;#39;(1 2 3 4))
(def listData (list 1 2 3 4))
(nth listData 0)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;conj&lt;/code&gt; function with list will add elements to the &lt;strong&gt;beginning&lt;/strong&gt; of the list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(conj listData 10)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fetching elements from list using &lt;code&gt;nth&lt;/code&gt; function will be slower than &lt;code&gt;get&lt;/code&gt; in vector. When to use what depends on whether we want to add elements to end or beginning of the data structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clojure supports &lt;strong&gt;higher-order functions&lt;/strong&gt;, i.e a function that can take another function as argument or can return another function. Programming languages with higher-order functions are said to support &lt;strong&gt;first class functions&lt;/strong&gt; because we can treat functions as values in the same way we treat other data types like number, string, etc., &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;inc&lt;/strong&gt; function can increment a numeric value. &lt;strong&gt;map&lt;/strong&gt; function can operate over a collection and can return a list as result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(inc 20)
(map inc [1 2 3 4])
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;[]&lt;/strong&gt; is used to pass arguments to functions. function parameters can be used to overload and can be used for multiple purposes. Those are called &lt;strong&gt;Arity&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;myFunction&lt;/span&gt;
  &lt;span class="p"&gt;([]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;no arguments supplied&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;two arguments supplied&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; ampresand is used to denote rest of parameters. Like *args in &lt;code&gt;python&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;myFunction&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(str "Hi. I am " name))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;myFunc&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;myFunc&lt;/span&gt; &lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;myFunc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Prasanna&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Kamal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anonymous Functions&lt;/strong&gt; are functions without names. They can be defined anywhere using &lt;code&gt;fn&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(fn [arguments] function-body)

((fn [x] (* x 3)) 8)

(map (fn [name] (str &amp;quot;Hi &amp;quot; name) [&amp;quot;Prasanna&amp;quot; &amp;quot;Kamal&amp;quot;])
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;anonymous functions can also be bound to variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(def my-function (fn [name] (str &amp;quot;Hi, &amp;quot; name)))
(my-function &amp;quot;Prasanna&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is a much more shortcut way to define anonymous functions using &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#(+ % 2)
(#(+ % 2) 8)
(#(str &amp;quot;Hi &amp;quot; %) &amp;quot;Prasanna&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the anonymous function takes multiple arguments, then &lt;code&gt;%1 %2 ... %n&lt;/code&gt; form can be used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Destructuring&lt;/strong&gt; is about binding names to values in a collection based on positions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;chooser&lt;/span&gt;
  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;first-param&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="nv"&gt;first-param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chooser&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Prasanna&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Kamal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;chooser&lt;/span&gt;
  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;other&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hi, &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Your age: &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;prinln&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Other info: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.string/join&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;other&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chooser&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Prasanna&amp;quot;&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test@testing.org&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clojure has &lt;strong&gt;closures&lt;/strong&gt;. Yes. closures are those functions that are returned by another functions. closure by itself is a design pattern to indicate state maintanence or scope of variables. To be frank, I haven't grasped this design well yet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;inc-maker&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Create a custom incrementor&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;inc-by&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;inc-by&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;inc3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;inc-maker&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;inc3&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;End of Chapter 3. Will continue further notes in separate post.&lt;/p&gt;</content><category term="books"></category><category term="code"></category></entry><entry><title>Learnings From Building Offline First Web App</title><link href="http://blog.purambokku.me/offline-first-coops-map.html" rel="alternate"></link><published>2017-04-24T00:00:00+05:30</published><updated>2017-04-24T00:00:00+05:30</updated><author><name>Prasanna Venkadesh</name></author><id>tag:blog.purambokku.me,2017-04-24:/offline-first-coops-map.html</id><summary type="html">&lt;p&gt;I wrote a web app recently. The purpose of the web app is to map the &lt;strong&gt;cooperatives&lt;/strong&gt; around us. I'll speak about the intentions behind it in another post, for now let us focus on the &lt;strong&gt;Offline First&lt;/strong&gt;
approach of this app. The application is hosted here &lt;a href="https://prashere.gitlab.io/coop-demo"&gt;live&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Initial Version â€¦&lt;/h3&gt;</summary><content type="html">&lt;p&gt;I wrote a web app recently. The purpose of the web app is to map the &lt;strong&gt;cooperatives&lt;/strong&gt; around us. I'll speak about the intentions behind it in another post, for now let us focus on the &lt;strong&gt;Offline First&lt;/strong&gt;
approach of this app. The application is hosted here &lt;a href="https://prashere.gitlab.io/coop-demo"&gt;live&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Initial Version&lt;/h3&gt;
&lt;p&gt;This is how I implemented it initially. Since it is a web application, users are going to access the app using web browser, therefore frontend is necessary. Similarly users are also going to mark/add new
coops to the map and this has to be stored somewhere. So taking a traditional web app approach, I have decided to write a backend in python which would receive data entered by users in frontend, process
them and store them in a database (preferred sqlite).&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/traditional-client-server.png"&gt;&lt;/p&gt;
&lt;h2&gt;Frontend (client)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;html (defines the structure)&lt;/li&gt;
&lt;li&gt;css (for defining styles)&lt;/li&gt;
&lt;li&gt;js (handle user events like placing marker in the map and making XHR requests to talk with the backend server to store and retrieve data).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Backend (server)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;flask (a python based micro web framework)&lt;/li&gt;
&lt;li&gt;sqlite3 (for storing and retreiving data)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;So what does this traditional design mean?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The frontend depends on the availability of the backend to work. Without backend part the frontend part becomes useless. This is true for all traditional client/server web application and
this also means &lt;strong&gt;centralization&lt;/strong&gt; and therefore &lt;strong&gt;Single Point of Failure (SPoF)&lt;/strong&gt;. In case, if the data is lost at the server side either accidentally or intentionally, the data is lost forever and
all those user contributions are gone. poof. This is why we call them &lt;strong&gt;SPoF&lt;/strong&gt;. &lt;a href="https://gitlab.com/fshm/coops-map/"&gt;Here&lt;/a&gt; is the source of the initial implementation in &lt;code&gt;flask&lt;/code&gt; + &lt;code&gt;sqlite3&lt;/code&gt; + &lt;code&gt;frontend&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I strongly believe in distributed, decentralized and peer-to-peer design practice, because these design practices empowers users and participants instead of the one who hosts it, for users and participants
are those who create values for themselves, while the one who hosts the application and data treats users as commodities and also appropriates the value created by users for their profit.
This is nothing short of labor theft. It's a classical problem inherent to capitalism and it's predecessors. i.e &lt;strong&gt;Who creates value and Who enjoys the fruits of the labour?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Provoked by this thought, I have been experimenting, studying and using various p2p and decentalized designs in whatever I come across. Therefore, it is natural for me to look for an alternative model
of this application. That is when I came across principles like &lt;strong&gt;&lt;a href="http://offlinefirst.org/"&gt;Offline First&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="http://nobackend.org/"&gt;noBackend&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="http://unhosted.org/"&gt;unHosted&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The moment I started to explore them is like... (I am falling short of words here to express), because of the movement world-wide and there are people with similar thoughts have demonstrated the same.&lt;/p&gt;
&lt;h3&gt;Offline First Version&lt;/h3&gt;
&lt;p&gt;Offline First, noBackend and unHosted are all design principles. While digging deeper into these design principles a lot of Free Software and Open Source hacktivists were already developing frameworks and
libraries based on these principles. Among those, &lt;strong&gt;&lt;a href="hood.ie"&gt;hoodie&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="https://www.kinto-storage.org/"&gt;kinto&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://remotestorage.io/"&gt;remoteStorage&lt;/a&gt;&lt;/strong&gt; are worth mentioning. I started with
&lt;code&gt;hoodie&lt;/code&gt; but since it is not well documented at the moment, I found it difficult to put it to use and then I jumped into &lt;code&gt;remoteStorage&lt;/code&gt; and then eventually  settled with &lt;code&gt;kinto&lt;/code&gt; by &lt;strong&gt;Mozilla&lt;/strong&gt; since it is
very well documented right from the beginning.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://prashere.gitlab.io/coop-demo"&gt;live&lt;/a&gt; version that you saw above is actually the offline first version written with the help of &lt;code&gt;kinto&lt;/code&gt;. This is how it the offline-first version is organized.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/offline-first.png"&gt;&lt;/p&gt;
&lt;h2&gt;Frontend&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;html (defines the structure)&lt;/li&gt;
&lt;li&gt;css (defines styles)&lt;/li&gt;
&lt;li&gt;js (handles user events &amp;amp; XHR)&lt;/li&gt;
&lt;li&gt;IndexedDB (a key, value JSON like data store within browser itself, which means data can be stored &amp;amp; retrieved on user's devices itself, Whoa!).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Backend&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kinto-server (server side storage)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point you might be wondering, when data can be stored and retreived locally without backend or server, why did we store data at server side too. This is to allow synchronization of data to various
devices as well as to various users globally over the Internet. It depends on what your app tries to achieve. In our case, we need a site that is accessible over web where anyone can visit and take a look
at the coops marked already or can contribute by adding new coops.&lt;/p&gt;
&lt;p&gt;The point here is that there is no single point of failure. Due to offline first approach, the data is stored on user devices. Even if the backend goes off or the data is lost at server side, users still
have the data with them. This data independence also open news possibilities like allowing users to choose their backend servers or go completely offline. &lt;a href="https://gitlab.com/prashere/coops-map-offline-first"&gt;Here&lt;/a&gt; 
is the source of the offline first implementation. When you look at it, it is a static web application with just html, css and js.&lt;/p&gt;
&lt;p&gt;If you are interested with this approach, do explore the above design principles, libraries, frameworks as well as in-browser features like &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers"&gt;Service Workers&lt;/a&gt;&lt;/strong&gt; 
and &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB"&gt;IndexedDB&lt;/a&gt;&lt;/strong&gt;. &lt;a href="https://developer.mozilla.org/en-US/Apps/Fundamentals/Offline"&gt;This documentation&lt;/a&gt; from mozilla developer networks explains the offline workflow.&lt;/p&gt;</content><category term="code"></category><category term="Internet"></category><category term="tech"></category><category term="web"></category><category term="free software"></category></entry><entry><title>P2P File &amp; URL Sharing App on LAN</title><link href="http://blog.purambokku.me/working-on-p2p-file-url-sharing-app.html" rel="alternate"></link><published>2016-07-08T00:00:00+05:30</published><updated>2016-07-08T00:00:00+05:30</updated><author><name>Prasanna Venkadesh</name></author><id>tag:blog.purambokku.me,2016-07-08:/working-on-p2p-file-url-sharing-app.html</id><summary type="html">&lt;p&gt;For the past 1 week, I have been working on a peer-to-peer File and URL sharing app and I have named it as &lt;strong&gt;Transceiver&lt;/strong&gt; (the ability to transmit and receive data). I would like to log the progress of what I have done so far.&lt;/p&gt;
&lt;p&gt;There are various reasons, why â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the past 1 week, I have been working on a peer-to-peer File and URL sharing app and I have named it as &lt;strong&gt;Transceiver&lt;/strong&gt; (the ability to transmit and receive data). I would like to log the progress of what I have done so far.&lt;/p&gt;
&lt;p&gt;There are various reasons, why I am writing this application.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I wanted to try and learn how to build cross platform Desktop applications using &lt;a href="http://electron.atom.io/"&gt;electron&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I wanted to write a p2p application, since I have been exploring p2p and mesh networking quite often.&lt;/li&gt;
&lt;li&gt;Last thing, I needed this application.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Whenever I attend meetups and I wanted to share some URLs that I have bookmarked to others, we do this by using some service that runs on Internet. It could be IRC or any Instant Messengers. Sometimes we have even tried using Pidgin + Bonjour (Avahi for GNU/Linux) and that have worked well too. But we have never succeeded file transfer through Pidgin + Bonjour.&lt;/p&gt;
&lt;p&gt;Following is a GIF of what have been done so far.&lt;/p&gt;
&lt;p&gt;&lt;img style="border: 1px solid black" src="images/transceiver.gif"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;First thing, it doesn't make sense to send URL links or Files or any data through Internet to a person who is sitting next to me or in the same hall, connected to the same network. The data doesn't need to leave the network in first place and also you don't need to expose to all those centralized services out there.&lt;/p&gt;
&lt;p&gt;Second thing, even in such a WLAN (or) LAN, there should be no central server / single point of failure. People should be able to form ad-hoc networks and should be able to communicate. In this sense, this application is serverless and peer-to-peer such that it doesn't need any central server (or) signalling server (like how they have in torrent trackers or webRTC peer connection) to connect to each other.&lt;/p&gt;
&lt;p&gt;Third thing, it has to be a Free Software. There already exists few of them like D-LAN (Distributed File Sharing on LAN), Lan Messenger, etc., I am just stacking up mine to the list.&lt;/p&gt;
&lt;p&gt;I use,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.zeroconf.org/"&gt;Zeroconf&lt;/a&gt; (also known as Bonjour or Avahi in GNU/Linux) for automatically registering and discovering peers on the same network.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://socket.io/"&gt;Socket.io&lt;/a&gt; for end to end socket connection. (I could still make use of socketio to upgrade the connection to webRTC).&lt;/li&gt;
&lt;li&gt;Electron + nodejs as a cross-platform framework.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An instance of this application can act as both server and client at the same time, thus can listen for incoming data and also it can send data to other peers on the network. Since the peers are discovered through zeroconf, their identities are exposed to everyone on the network using this app and thus we are able to eliminate central signalling server here.&lt;/p&gt;
&lt;p&gt;For now the text / URL sharing is complete. I am yet to work on the File transfer part. I am releasing this work under Free Software license (GPL v3) and the source code is hosted on &lt;a href="https://gitlab.com/prashere/transceiver/"&gt;gitlab here&lt;/a&gt;.&lt;/p&gt;</content><category term="code"></category><category term="free software"></category><category term="networks"></category><category term="tech"></category></entry><entry><title>Cross Compilation in Go</title><link href="http://blog.purambokku.me/go-cross-compilation.html" rel="alternate"></link><published>2016-06-24T00:00:00+05:30</published><updated>2016-06-24T00:00:00+05:30</updated><author><name>Prasanna Venkadesh</name></author><id>tag:blog.purambokku.me,2016-06-24:/go-cross-compilation.html</id><summary type="html">&lt;p&gt;Recently I have started to explore the Go programming language or golang in short. Go is a compiled language which can produce standalone binaries for the go programs, which means the receiver of this binary need not have go compiler and the libraries that this program is dependent installed on â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I have started to explore the Go programming language or golang in short. Go is a compiled language which can produce standalone binaries for the go programs, which means the receiver of this binary need not have go compiler and the libraries that this program is dependent installed on their machine, instead they can just run the binary and the program will be executed.&lt;/p&gt;
&lt;p&gt;This is also the same case with C and C++. If you have used GCC (GNU Compiler Collection) then you could have come across something called cross-compilation in gcc. Compilation means converting from source code to binary, while cross compilation means producing binaries that can be used on other target architectures too.&lt;/p&gt;
&lt;p&gt;For example, I am writing code in my laptop which is running Linux kernel and the cpu &amp;amp; operating system architectures are 64-bit (often represented as amd64 or x86_64). When I compile this source code on my laptop, I will get a binary. I can execute this binary and can also distribute. But the only constraint is this binary is build for 64bit architecture and linux based machines only. Therefore if someone who runs 32bit or ARM based architectures even with Linux kernel, they cannot use this binary.&lt;/p&gt;
&lt;p&gt;In order to overcome this, gcc allows developers to do cross compilation. Similarly go compiler also has this feature inbuilt. Here is how we do it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;env GOOS=linux GOARCH=arm go build somefile.go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above command, I am setting values for two environment variables GOOS and GOARCH respectively where GOOS is the name of the kernel used in target operating system and GOARCH is the name of the cpu architecture used in the target computer hardware. Succeeding that is the go command to build binary from the source code &lt;code&gt;somefile.go&lt;/code&gt;. It will take few seconds to build the binary, once that is done now the binary can be used to execute the program in the target machine.&lt;/p&gt;
&lt;p&gt;To know the valid and available GOOS and GOARCH values that go accepts, &lt;a href="https://golang.org/doc/install/source#environment"&gt;go here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: Producing binaries and distributing them is very good from users usability point of view. It will be convinient for users to just double click on something to see it work (in fact that's how most of them were training through Microsoft Windows). As a free software activist, I appeal that we should also consider the users freedom point of view and give them links to access the source code of the same program that they use in their computer in the binary. The users have the right to know what is being executed in their machines.&lt;/p&gt;</content><category term="tech"></category><category term="code"></category></entry></feed>